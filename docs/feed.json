{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "Pythonic",
    "home_page_url": "https://gavinw.me/pythonic",
    "feed_url": "https://gavinw.me/pythonic/feed.json",
    "items": [
        {
            "id": "https://gavinw.me/pythonic/./python/dynamic-config.html",
            "url": "https://gavinw.me/pythonic/./python/dynamic-config.html",
            "title": "Dynamic Python Class from TOML",
            "date_published": "2025-04-21T00:00:00Z",
            "content_html": "<p>Python's standard library provides functionality to read a TOML configuration file and dynamically create class instances based on the parameters defined in that file. This is useful for command line tools and web applications.</p><p><a href=\"https://gavinw.me/pythonic/./python/dynamic-config.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./pyzmq/test-client-server.html",
            "url": "https://gavinw.me/pythonic/./pyzmq/test-client-server.html",
            "title": "Testing a PyZMQ Client and Server",
            "date_published": "2025-04-12T00:00:00Z",
            "content_html": "<p>The ZeroMQ context and socket for PyZMQ code can be patched and mocked using pytest and pytest-mock. This allows the code to be tested without having to run the server and connect the client. For the example discussed below, the client sends a request to the server, the request message is used by the server to execute a command, and the result of this command is sent back to the client. Finally, tests are demonstrated for the client and server codes.</p><p><a href=\"https://gavinw.me/pythonic/./pyzmq/test-client-server.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./pyzmq/request-reply.html",
            "url": "https://gavinw.me/pythonic/./pyzmq/request-reply.html",
            "title": "Request-Reply Pattern with PyZMQ",
            "date_published": "2025-04-10T00:00:00Z",
            "content_html": "<p>This demonstrates a simple request-reply pattern using the <a href=\"https://pyzmq.readthedocs.io/en/latest/\">PyZMQ</a> package for Python. In the example, the client sends a message to the server which replies back to the client.</p><p><a href=\"https://gavinw.me/pythonic/./pyzmq/request-reply.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/dynamic-import.html",
            "url": "https://gavinw.me/pythonic/./python/dynamic-import.html",
            "title": "Dynamic Package Import in Python",
            "date_published": "2025-04-09T00:00:00Z",
            "content_html": "<p>Use the <code>importlib</code> package to dynamically import a Python module by its name. Similarly, use the <code>getattr</code> function to get a class or function by name. This is useful in plugin architectures or when loading things based on configuration files.</p><p><a href=\"https://gavinw.me/pythonic/./python/dynamic-import.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/log-file.html",
            "url": "https://gavinw.me/pythonic/./python/log-file.html",
            "title": "Delay Log File Creation",
            "date_published": "2025-03-27T00:00:00Z",
            "content_html": "<p>Use the delay argument for Python's log file handler to avoid creating unnecessary log files. This ensures that a log file is created only for the desired log levels.</p><p><a href=\"https://gavinw.me/pythonic/./python/log-file.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/config.html",
            "url": "https://gavinw.me/pythonic/./flask/config.html",
            "title": "Flask App Configuration",
            "date_published": "2025-03-12T00:00:00Z",
            "content_html": "<p>The <a href=\"https://pypi.org/project/python-dotenv/\">dotenv</a> package can be used to load configuration settings for a Flask app. The configuration is defined in a <code>.env</code> file which is ignored by version control to ensure items like API keys and passwords are not shared with others.</p><p><a href=\"https://gavinw.me/pythonic/./flask/config.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/projects-uv.html",
            "url": "https://gavinw.me/pythonic/./python/projects-uv.html",
            "title": "Python Projects with uv",
            "date_published": "2025-01-07T00:00:00Z",
            "content_html": "<p>Managing a virtual environment and its dependencies can be a hassle for Python projects. Choosing between the different techniques to install Python and different package managers can be a daunting task. Luckily, uv makes this process much easier.</p><p><a href=\"https://gavinw.me/pythonic/./python/projects-uv.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/run-script-uv.html",
            "url": "https://gavinw.me/pythonic/./python/run-script-uv.html",
            "title": "Run Python Scripts with uv",
            "date_published": "2025-01-06T00:00:00Z",
            "content_html": "<p>A Python script is a file intended for standalone execution. The uv tool can be used to directly run a script even if other Python packages are needed to run it. This offers a more streamlined approach for running scripts compared to manually managing a virtual environment and its dependencies.</p><p><a href=\"https://gavinw.me/pythonic/./python/run-script-uv.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/virtual-env-uv.html",
            "url": "https://gavinw.me/pythonic/./python/virtual-env-uv.html",
            "title": "Virtual Environments with uv",
            "date_published": "2025-01-05T00:00:00Z",
            "content_html": "<p>The uv tool is a great option for installing Python and creating virtual environments. It will automatically install Python if it is not available on your system.</p><p><a href=\"https://gavinw.me/pythonic/./python/virtual-env-uv.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/package-data.html",
            "url": "https://gavinw.me/pythonic/./python/package-data.html",
            "title": "Python Package with Data",
            "date_published": "2024-11-24T00:00:00Z",
            "content_html": "<p>The file structure below represents a project for a Python package named <code>mypackage</code> that includes data files. The data files in this example are CSV text files located in the package's source directory at <code>src/mypackage/data/</code>. The package can be installed using <code>pip install .</code> from the root level of the project.</p><p><a href=\"https://gavinw.me/pythonic/./python/package-data.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/config-dataclass.html",
            "url": "https://gavinw.me/pythonic/./python/config-dataclass.html",
            "title": "Configuration Using a Python dataclass",
            "date_published": "2024-11-21T00:00:00Z",
            "content_html": "<p>A data class in Python can be used to store configuration settings for an application or service. Default configuration values are assigned to fields on the data class. However, the user can overload those values by using a class method to load the configuration settings from a file.</p><p><a href=\"https://gavinw.me/pythonic/./python/config-dataclass.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/argparse.html",
            "url": "https://gavinw.me/pythonic/./python/argparse.html",
            "title": "Command-line Arguments with Python",
            "date_published": "2024-09-28T00:00:00Z",
            "content_html": "<p>The <code>argparse</code> module provides an interface to write command-line programs in Python. It is part of the Python standard library so there's no need for external dependencies. A basic example is given below that demonstrates positional and optional arguments. The second example shows the use of subparsers to create subcommands.</p><p><a href=\"https://gavinw.me/pythonic/./python/argparse.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/protocol.html",
            "url": "https://gavinw.me/pythonic/./python/protocol.html",
            "title": "Protocols in Python",
            "date_published": "2024-07-13T00:00:00Z",
            "content_html": "<p>A protocol is a way to define structural typing or \"duck typing\" in Python. It defines a set of attributes and/or methods that an object must have in order to be considered compatible with that protocol. Below is a protocol defined as an <code>Activity</code> class which must have <code>name</code> and <code>duration</code> attributes along with a <code>get_message</code> method.</p><p><a href=\"https://gavinw.me/pythonic/./python/protocol.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/makefiles.html",
            "url": "https://gavinw.me/pythonic/./python/makefiles.html",
            "title": "Makefiles for Python Projects",
            "date_published": "2024-03-14T00:00:00Z",
            "content_html": "<p>Makefiles are typically used for C and C++ projects to build source code but they can be useful for Python projects too. A Makefile is just a text file used by the GNU Make tool to run commands. For a Python project, these commands can run unit tests, format your code, or publish a package to PyPI.</p><p><a href=\"https://gavinw.me/pythonic/./python/makefiles.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/textwrap-dedent.html",
            "url": "https://gavinw.me/pythonic/./python/textwrap-dedent.html",
            "title": "Dedent Text with Python",
            "date_published": "2024-02-29T00:00:00Z",
            "content_html": "<p>Remove leading whitespace from every line in a string with the <code>textwrap.dedent()</code> function. The first example shown below prints a multiline string that is defined in a function. The second example prints the same string but removes the leading whitespace.</p><p><a href=\"https://gavinw.me/pythonic/./python/textwrap-dedent.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/virtual-env.html",
            "url": "https://gavinw.me/pythonic/./python/virtual-env.html",
            "title": "Virtual Environments",
            "date_published": "2024-02-16T00:00:00Z",
            "content_html": "<p>The <code>venv</code> module included with Python is used to create and manage virtual environments. This page provides some useful commands for creating and working with virtual environments. A virtual environment should not be checked into source control via Git or other such systems.</p><p><a href=\"https://gavinw.me/pythonic/./python/virtual-env.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/cached-class-property.html",
            "url": "https://gavinw.me/pythonic/./python/cached-class-property.html",
            "title": "Cached Class Property in Python",
            "date_published": "2024-01-13T00:00:00Z",
            "content_html": "<p>The <a href=\"https://docs.python.org/3/library/functools.html\">functools</a> module provides a <code>@cached_property</code> decorator to store the value of a class property.</p><p><a href=\"https://gavinw.me/pythonic/./python/cached-class-property.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/cache-function.html",
            "url": "https://gavinw.me/pythonic/./python/cache-function.html",
            "title": "Cache Function in Python",
            "date_published": "2024-01-13T00:00:00Z",
            "content_html": "<p>The <a href=\"https://docs.python.org/3/library/functools.html\">functools</a> module provides a <code>@cache</code> decorator to store the results of an expensive function; also known as memoize.</p><p><a href=\"https://gavinw.me/pythonic/./python/cache-function.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/version.html",
            "url": "https://gavinw.me/pythonic/./python/version.html",
            "title": "Version Number in Python",
            "date_published": "2023-11-30T00:00:00Z",
            "content_html": "<p>Use the <a href=\"https://docs.python.org/3/library/importlib.metadata.html\">importlib.metadata</a> library in Python to get the version number of a package. The example below gets the version of the ipython package that has been installed in the environment.</p><p><a href=\"https://gavinw.me/pythonic/./python/version.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/sublime-project.html",
            "url": "https://gavinw.me/pythonic/./python/sublime-project.html",
            "title": "Sublime Text for Python Projects",
            "date_published": "2023-11-25T00:00:00Z",
            "content_html": "<p>Projects in <a href=\"https://www.sublimetext.com\">Sublime Text</a> are made up of two files: the <code>.sublime-project</code> file, which contains the project configuration, and the <code>.sublime-workspace</code> file, which contains user specific data such as the open files and the modifications to each file.</p><p><a href=\"https://gavinw.me/pythonic/./python/sublime-project.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/doctest.html",
            "url": "https://gavinw.me/pythonic/./python/doctest.html",
            "title": "Doctest with Python",
            "date_published": "2023-11-17T00:00:00Z",
            "content_html": "<p>The docstring of the <code>adder()</code> function shown below contains two examples of how to use the function. The function resides in a file named <code>example.py</code>. Use the <code>doctest</code> module to test the examples in this docstring.</p><p><a href=\"https://gavinw.me/pythonic/./python/doctest.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/gauss.html",
            "url": "https://gavinw.me/pythonic/./numpy/gauss.html",
            "title": "Gauss-Legendre Points and Weights with NumPy",
            "date_published": "2023-08-31T00:00:00Z",
            "content_html": "<p>The function below returns the Gauss-Legendre integration points and weights for a 2D quadrilateral using values from a 1D quadrature. The 1D values are obtained from NumPy's <code>leggauss()</code> function.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/gauss.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/debugger.html",
            "url": "https://gavinw.me/pythonic/./python/debugger.html",
            "title": "Debugger in Python",
            "date_published": "2023-07-18T00:00:00Z",
            "content_html": "<p>The <a href=\"https://docs.python.org/3/library/pdb.html\">pdb</a> module provides an interactive debugger for Python programs. It supports breakpoints and stepping through the source code. To demonstrate using the debugger and setting a breakpoint, first consider the example shown below.</p><p><a href=\"https://gavinw.me/pythonic/./python/debugger.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/conda-env.html",
            "url": "https://gavinw.me/pythonic/./python/conda-env.html",
            "title": "Conda Environments",
            "date_published": "2023-06-15T00:00:00Z",
            "content_html": "<p>Similar to Python's <code>venv</code> module, Conda can also create virtual environments but these environments support languages other than Python.</p><p><a href=\"https://gavinw.me/pythonic/./python/conda-env.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/package-name.html",
            "url": "https://gavinw.me/pythonic/./python/package-name.html",
            "title": "Python Package Name",
            "date_published": "2023-06-11T00:00:00Z",
            "content_html": "<p>The distribution name of a Python package can be different than the import name. Below is an example of a repository named <code>sklearn-model</code> which contains the <code>skmodel</code> package.</p><p><a href=\"https://gavinw.me/pythonic/./python/package-name.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/imshow-plot.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/imshow-plot.html",
            "title": "Imshow Plot with Matplotlib",
            "date_published": "2023-05-10T00:00:00Z",
            "content_html": "<p>Display data as an image using Matplotlib's imshow method.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/imshow-plot.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/matshow-plot.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/matshow-plot.html",
            "title": "Matshow Plot with Matplotlib",
            "date_published": "2023-05-10T00:00:00Z",
            "content_html": "<p>Visualize an array using Matplotlib's matshow function. The first example shown below plots a 2D array and the second example plots a diagonal array.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/matshow-plot.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/count-letters.html",
            "url": "https://gavinw.me/pythonic/./python/count-letters.html",
            "title": "Count Letters with Python",
            "date_published": "2023-04-15T00:00:00Z",
            "content_html": "<p>Given the string <code>Mary had a little Mommy lamb</code>, count the number of times a letter appears in the string. See the examples below for different approaches.</p><p><a href=\"https://gavinw.me/pythonic/./python/count-letters.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/bar-plot.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/bar-plot.html",
            "title": "Bar Plot with Matplotlib",
            "date_published": "2023-02-09T00:00:00Z",
            "content_html": "<p>The example below creates a bar plot and adds value labels to each bar.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/bar-plot.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/index-max.html",
            "url": "https://gavinw.me/pythonic/./numpy/index-max.html",
            "title": "Index of Max Value with NumPy",
            "date_published": "2023-02-06T00:00:00Z",
            "content_html": "<p>Use NumPy's <code>argmax()</code> function to get the index of the maximum value in an array.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/index-max.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/form-htmx.html",
            "url": "https://gavinw.me/pythonic/./flask/form-htmx.html",
            "title": "Form Input with Htmx and Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://htmx.org\">Htmx</a> allows you to develop dynamic, interactive web pages without complex JavaScript. The example below uses Htmx in a Flask app to submit a form when the page loads. Results calculated from the form values are displayed on the same page.</p><p><a href=\"https://gavinw.me/pythonic/./flask/form-htmx.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/plotly-restyle.html",
            "url": "https://gavinw.me/pythonic/./flask/plotly-restyle.html",
            "title": "Plotly Graph Restyle with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://plotly.com\">Plotly</a> is a great graphing library for scientific applications. The example below demonstrates using the Plotly JavaScript library in a Flask app. When the page first loads, a default line graph is shown. New data points are added to the graph using the form inputs. The <code>Plotly.restyle</code> function is used to redraw the graph when new data points are submitted; this approach avoids recreating an entirely new Plotly graph each time the data is updated.</p><p><a href=\"https://gavinw.me/pythonic/./flask/plotly-restyle.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/ajax.html",
            "url": "https://gavinw.me/pythonic/./flask/ajax.html",
            "title": "Update Page with Ajax and Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>This Flask webapp example uses Ajax to update the page with results from the post request. The results are returned as JSON which is used to update the div tags.</p><p><a href=\"https://gavinw.me/pythonic/./flask/ajax.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/bokeh-htmx.html",
            "url": "https://gavinw.me/pythonic/./flask/bokeh-htmx.html",
            "title": "Bokeh Graph with Htmx and Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://bokeh.org\">Bokeh</a> is a visualization library for Python that makes it easy to plot data in Jupyter notebooks or web pages. <a href=\"https://htmx.org\">Htmx</a> allows you to develop dynamic, interactive web pages without complex JavaScript. The example below uses Htmx in a Flask app to display a Bokeh graph in a web page without updating the entire page.</p><p><a href=\"https://gavinw.me/pythonic/./flask/bokeh-htmx.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/plotly-graph.html",
            "url": "https://gavinw.me/pythonic/./flask/plotly-graph.html",
            "title": "Plotly Graph with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://plotly.com\">Plotly</a> is a great graphing library for scientific applications. The example below demonstrates using the Plotly JavaScript library in a Flask app.</p><p><a href=\"https://gavinw.me/pythonic/./flask/plotly-graph.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/plotly-htmx.html",
            "url": "https://gavinw.me/pythonic/./flask/plotly-htmx.html",
            "title": "Plotly Graph with Htmx and Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://htmx.org\">Htmx</a> allows you to develop dynamic, interactive web pages without complex JavaScript. The example below uses Htmx in a Flask app to display a Plotly graph in a web page without updating the entire page.</p><p><a href=\"https://gavinw.me/pythonic/./flask/plotly-htmx.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/bokeh-graph.html",
            "url": "https://gavinw.me/pythonic/./flask/bokeh-graph.html",
            "title": "Bokeh Graph with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p><a href=\"https://bokeh.org\">Bokeh</a> is a visualization library for Python that makes it easy to plot data in Jupyter notebooks or web pages. The example below uses Flask to serve a web page, handle the form input data, then plot the data on a separate page using Bokeh.</p><p><a href=\"https://gavinw.me/pythonic/./flask/bokeh-graph.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./flask/form-input.html",
            "url": "https://gavinw.me/pythonic/./flask/form-input.html",
            "title": "Form Input with Flask",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>An HTML form collects user input on a web page. Using Flask, the input can be evaluated in Python and used elsewhere in the web application. As an example, in the <code>app.py</code> file shown below, the index or home page renders the HTML form. The input from the form is handled as two numbers. The sum, product, and fraction of the numbers are calculated then passed to the results page.</p><p><a href=\"https://gavinw.me/pythonic/./flask/form-input.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/sorted-list.html",
            "url": "https://gavinw.me/pythonic/./python/sorted-list.html",
            "title": "Sorted List of Items with Python",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>A list of dictionaries can be sorted using the keys in the dictionaries, while a list of tuples can be sorted using the tuple's index.</p><p><a href=\"https://gavinw.me/pythonic/./python/sorted-list.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./tkinter/label.html",
            "url": "https://gavinw.me/pythonic/./tkinter/label.html",
            "title": "Update Label Text in Tkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of updating a Label's text in Tkinter.</p><p><a href=\"https://gavinw.me/pythonic/./tkinter/label.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./tkinter/ttkbootstrap.html",
            "url": "https://gavinw.me/pythonic/./tkinter/ttkbootstrap.html",
            "title": "Theme ttkbootstrap",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of a Tkinter app using the ttkbootstrap theme. More information about\nthe theme is available on GitHub at <a href=\"https://github.com/israel-dryer/ttkbootstrap\">israel-dryer/ttkbootstrap</a>.</p><p><a href=\"https://gavinw.me/pythonic/./tkinter/ttkbootstrap.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./tkinter/customtkinter.html",
            "url": "https://gavinw.me/pythonic/./tkinter/customtkinter.html",
            "title": "Theme customtkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of a Tkinter app using the customtkinter theme. This theme will automatically change to light or dark mode when the macOS appearance changes. More information about the theme is available on GitHub at <a href=\"https://github.com/TomSchimansky/CustomTkinter\">TomSchimansky/CustomTkinter</a>.</p><p><a href=\"https://gavinw.me/pythonic/./tkinter/customtkinter.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./tkinter/open-json-file.html",
            "url": "https://gavinw.me/pythonic/./tkinter/open-json-file.html",
            "title": "Open JSON File in Tkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of opening a JSON file and reading its contents in a Tkinter app. See\nthe <a href=\"https://docs.python.org/3/library/dialog.html\">Python Tkinter docs</a> for\nmore information about file selection dialogs.</p><p><a href=\"https://gavinw.me/pythonic/./tkinter/open-json-file.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./tkinter/matplotlib.html",
            "url": "https://gavinw.me/pythonic/./tkinter/matplotlib.html",
            "title": "View Data with Matplotlib in Tkinter",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Below is an example of using Matplotlib to plot data in a Tkinter app. The plot figure is shown in a separate window when the button is pressed.</p><p><a href=\"https://gavinw.me/pythonic/./tkinter/matplotlib.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./tkinter/basic-app.html",
            "url": "https://gavinw.me/pythonic/./tkinter/basic-app.html",
            "title": "Basic Tkinter Application",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>This example demonstrates the structure of a basic Tkinter application.</p><p><a href=\"https://gavinw.me/pythonic/./tkinter/basic-app.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/large-array-memory.html",
            "url": "https://gavinw.me/pythonic/./numpy/large-array-memory.html",
            "title": "Memory Usage of a Large NumPy Array",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>In the examples below, a 500x2000x2000 three-dimensional NumPy array named <code>a</code> is initialized with zeros. At each iteration, a random two-dimensional array <code>r</code> is inserted into array <code>a</code>. This approach could represent a larger piece of code where the <code>r</code> array would be created from various calculations during each iteration of the for-loop. Consequently, each slice in the z dimension of the <code>a</code> array is calculated at each iteration.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/large-array-memory.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/line-plot.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/line-plot.html",
            "title": "Line Plot with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Below is a simple example of plotting a line using Matplotlib.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/line-plot.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/animation.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/animation.html",
            "title": "Animation with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Matplotlib provides two animation classes for animating a plot figure. The example below uses the ArtistAnimation class. The animation can be displayed just like any other Matplotlib figure and saved to file as various video formats.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/animation.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/contour-smoothing.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/contour-smoothing.html",
            "title": "Contour Plot Smoothing with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>The example below generates a contour plot of sparse data.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/contour-smoothing.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./matplotlib/mosaic-grid.html",
            "url": "https://gavinw.me/pythonic/./matplotlib/mosaic-grid.html",
            "title": "Mosaic Grid of Plots with Matplotlib",
            "date_published": "2023-02-04T00:00:00Z",
            "content_html": "<p>Example of using Matplotlib <code>subplot_mosaic()</code> to create a grid of plots.</p><p><a href=\"https://gavinw.me/pythonic/./matplotlib/mosaic-grid.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/dictionaries.html",
            "url": "https://gavinw.me/pythonic/./python/dictionaries.html",
            "title": "Dictionaries in Python",
            "date_published": "2022-11-15T00:00:00Z",
            "content_html": "<p>A dictionary can be created with comma-separated key:value pairs within braces or by using the dict type constructor. A value is accessed by specifying its key in square brackets. The order of items in a dictionary is guaranteed as of Python 3.7.</p><p><a href=\"https://gavinw.me/pythonic/./python/dictionaries.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/strings.html",
            "url": "https://gavinw.me/pythonic/./python/strings.html",
            "title": "Strings in Python",
            "date_published": "2022-11-11T00:00:00Z",
            "content_html": "<p>Some basic examples of creating strings in Python.</p><p><a href=\"https://gavinw.me/pythonic/./python/strings.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./dask/arrays.html",
            "url": "https://gavinw.me/pythonic/./dask/arrays.html",
            "title": "Dask Arrays",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Dask Array is similar to a NumPy array and allows cutting up a large array into smaller arrays (chunks). This enables working with arrays that are larger than memory. Computations can be applied in parallel for fast execution. Below is an example of using Dask array <code>map_blocks()</code> to map a function that returns a single value. Using an 8 CPU core MacBook Pro running macOS v11.6, the serial elapsed time is 513.51 seconds and the Dask elapsed time is 3.21 seconds.</p><p><a href=\"https://gavinw.me/pythonic/./dask/arrays.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./dask/run-as-script.html",
            "url": "https://gavinw.me/pythonic/./dask/run-as-script.html",
            "title": "Run Dask Code as a Script",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Since most Dask examples are demonstrated using Jupyter notebooks, here's an example of using Dask in a Python file or script. Notice how the Dask code must be in the <code>__main__</code> block or called from within a function.</p><p><a href=\"https://gavinw.me/pythonic/./dask/run-as-script.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/secrets.html",
            "url": "https://gavinw.me/pythonic/./python/secrets.html",
            "title": "Secrets in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Use the <code>secrets</code> module to generate cryptographically strong random passwords containing letters, numbers, and punctuation.</p><p><a href=\"https://gavinw.me/pythonic/./python/secrets.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/counter.html",
            "url": "https://gavinw.me/pythonic/./python/counter.html",
            "title": "Counter in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The <code>Counter</code> class counts the number of times an item appears in a list or hashable object. For example, you can count the number of times a string appears in a list or how often a letter occurs in a string.</p><p><a href=\"https://gavinw.me/pythonic/./python/counter.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/unittest-csv.html",
            "url": "https://gavinw.me/pythonic/./python/unittest-csv.html",
            "title": "Unittest CSV Files with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The example below demonstrates a unit test for a function that writes data in a dictionary to CSV files.</p><p><a href=\"https://gavinw.me/pythonic/./python/unittest-csv.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/json.html",
            "url": "https://gavinw.me/pythonic/./python/json.html",
            "title": "JSON with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>JavaScript Object Notation (JSON) is a common data format that is supported natively in Python. The format is built on name/value pairs and ordered list values. Visit <a href=\"https://www.json.org/json-en.html\">json.org</a> to learn more about the JSON format.</p><p><a href=\"https://gavinw.me/pythonic/./python/json.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/prealloc-list.html",
            "url": "https://gavinw.me/pythonic/./python/prealloc-list.html",
            "title": "Pre-allocate a Python List",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>If the size of a list is known, then pre-allocating the list can provide performance improvements; especially for a large list. The example below measures the performance of appending items to an empty list. Pre-allocating a list of known size and assigning items to it gives better performance than appending to the list. The list comprehension approach (see Example 3) gives the best elapsed time.</p><p><a href=\"https://gavinw.me/pythonic/./python/prealloc-list.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/tuples.html",
            "url": "https://gavinw.me/pythonic/./python/tuples.html",
            "title": "Tuples in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>A tuple is a number of items separated by commas.</p><p><a href=\"https://gavinw.me/pythonic/./python/tuples.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/cprofile.html",
            "url": "https://gavinw.me/pythonic/./python/cprofile.html",
            "title": "cProfile for Python Code",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The <code>cProfile</code> module provides an interface to profile Python programs. A single function or an entire script or module can be profiled. As an example, the script shown below contains two functions that suspend execution for 2 and 4.5 seconds.</p><p><a href=\"https://gavinw.me/pythonic/./python/cprofile.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/lists.html",
            "url": "https://gavinw.me/pythonic/./python/lists.html",
            "title": "Lists in Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>A list is used to group numbers, strings, or objects together. It is written as a pair of square brackets containing comma-separated items. A list typically contains items of similar type but it can contain items of different types too. Unlike tuples, lists are mutable therefore the content of a list can be modified.</p><p><a href=\"https://gavinw.me/pythonic/./python/lists.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/test-examples.html",
            "url": "https://gavinw.me/pythonic/./python/test-examples.html",
            "title": "Test Examples with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>Example scripts are often available for Python packages to demonstrate how to use the package. The examples are typically part of the repository where the package is developed. Tests should be written to ensure the examples continue to work with new versions of the package.</p><p><a href=\"https://gavinw.me/pythonic/./python/test-examples.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/xml.html",
            "url": "https://gavinw.me/pythonic/./python/xml.html",
            "title": "Parsing XML with Python",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>There are several XML parsers available in the Python standard library. Below is an example of using the ElementTree module.</p><p><a href=\"https://gavinw.me/pythonic/./python/xml.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./scipy/sparse-diag.html",
            "url": "https://gavinw.me/pythonic/./scipy/sparse-diag.html",
            "title": "Sparse Diagonal Matrix with SciPy",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>The <code>diags</code> function from SciPy can be used to create a sparse diagonal matrix. The matrix is constructed from lists or NumPy arrays that represent the diagonals of the matrix. The <code>offsets</code> argument sets the placement of the diagonals within the matrix where <code>k = 0</code> is the main diagonal, <code>k &lt; 0</code> is the kth lower diagonal, and <code>k &gt; 0</code> is the kth upper diagonal.</p><p><a href=\"https://gavinw.me/pythonic/./scipy/sparse-diag.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./ray/actors.html",
            "url": "https://gavinw.me/pythonic/./ray/actors.html",
            "title": "Ray Actors",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p><a href=\"https://www.ray.io\">Ray</a> actors are used to parallelize a class instance to perform stateful operations in parallel. Ray will start a remote instance of the class and then execute remote method calls and maintain its own internal state. The example below compares a parallel Ray actor approach to a standard class approach. A computationally expensive task is simulated by using the <code>sleep()</code> function.</p><p><a href=\"https://gavinw.me/pythonic/./ray/actors.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./ray/functions.html",
            "url": "https://gavinw.me/pythonic/./ray/functions.html",
            "title": "Ray Functions",
            "date_published": "2022-11-08T00:00:00Z",
            "content_html": "<p>To parallelize a function with the <a href=\"https://www.ray.io\">Ray</a> framework, decorate the function with <code>@ray.remote</code> to run the function remotely. Call the function with <code>.remote()</code> instead of calling it normally. The remote call yields a future that must be fetched with <code>ray.get</code>. The example below compares a parallel Ray function to a standard non-parallel function. A computationally expensive task is simulated by using the <code>sleep()</code> function.</p><p><a href=\"https://gavinw.me/pythonic/./ray/functions.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/clip-array.html",
            "url": "https://gavinw.me/pythonic/./numpy/clip-array.html",
            "title": "Clip Array Values with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>The <code>clip</code> function limits the values in an array based on a given interval or minimum or maximum value.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/clip-array.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/bool-index.html",
            "url": "https://gavinw.me/pythonic/./numpy/bool-index.html",
            "title": "Boolean Indexing with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Use boolean indexing in NumPy arrays to assign values. The example below assigns a zero to array items that are less than zero.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/bool-index.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/full-array.html",
            "url": "https://gavinw.me/pythonic/./numpy/full-array.html",
            "title": "Full Array in NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Use the <code>full</code> function in NumPy to create a new array filled with a given value.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/full-array.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/maximum-array.html",
            "url": "https://gavinw.me/pythonic/./numpy/maximum-array.html",
            "title": "Maximum Array with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>The <code>maximum</code> function returns a new array that contains the maximum values of the two given arrays.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/maximum-array.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/difference.html",
            "url": "https://gavinw.me/pythonic/./numpy/difference.html",
            "title": "Set Difference of Two NumPy Arrays",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>The <code>setdiff1d</code> function returns the unique values in array 1 that are not in array 2.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/difference.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/loop-columns.html",
            "url": "https://gavinw.me/pythonic/./numpy/loop-columns.html",
            "title": "Loop Over Columns with NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Loop over columns in an array by iterating over the transpose of the array.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/loop-columns.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/compare-inv-solve.html",
            "url": "https://gavinw.me/pythonic/./numpy/compare-inv-solve.html",
            "title": "Compare inv and solve Functions in NumPy",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>Solve equation <code>A*x=b</code> for <code>x</code> and compare results using the <code>np.linalg.solve()</code> function to the <code>np.linalg.inv()</code> approach.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/compare-inv-solve.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./numpy/save-load-arrays.html",
            "url": "https://gavinw.me/pythonic/./numpy/save-load-arrays.html",
            "title": "Save and Load NumPy Arrays",
            "date_published": "2022-11-07T00:00:00Z",
            "content_html": "<p>NumPy arrays can be saved and loaded using different file formats. Examples of using the NumPy file formats <code>.npy</code> and <code>.npz</code> as well as a plain text format are given below.</p><p><a href=\"https://gavinw.me/pythonic/./numpy/save-load-arrays.html\">Continue reading...</a></p>"
        },
        {
            "id": "https://gavinw.me/pythonic/./python/fizzbuzz.html",
            "url": "https://gavinw.me/pythonic/./python/fizzbuzz.html",
            "title": "Fizz Buzz in Python",
            "date_published": "2020-05-14T00:00:00Z",
            "content_html": "<p>This is the classic fizz buzz example where a number divisible by 3 is replaced with Fizz, a number divisible by 5 is replaced with Buzz, and a number divisible by both 3 and 5 (divisible by 15) is replaced with Fizz Buzz.</p><p><a href=\"https://gavinw.me/pythonic/./python/fizzbuzz.html\">Continue reading...</a></p>"
        }
    ]
}